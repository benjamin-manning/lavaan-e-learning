 ### Title:    Mediation & Moderation: Lecture 3 Examples
### Author:   Kyle M. Lang
### Created:  2016-FEB-06
### Modified: 2016-FEB-12

library(mvtnorm)
library(lavaan)

dataDir <- "../data/"
fileName <- "adamsKlpsScaleScore.rds"

dat1 <- readRDS(paste0(dataDir, fileName))

head(dat1)

summary(lm(revDisc ~ policy, data = dat1))
summary(lm(revDisc ~ sysRac, data = dat1))

summary(lm(policy ~ polAffil, data = dat1))

summary(lm(policy ~ revDisc, data = dat1))
summary(lm(sysRac ~ revDisc, data = dat1))
summary(lm(policy ~ sysRac, data = dat1))


mod1 <- "
policy ~ polAffil + sysRac
sysRac ~ polAffil
"

out1 <- sem(mod1, dat = dat1)
summary(out1)

mod2 <- "
policy ~ polAffil + b*sysRac
sysRac ~ a*polAffil

ab := a*b # Define the indirect effect
"

out2 <- sem(mod2, data = dat1)
summary(out2)

out3 <- sem(mod2, data = dat1, se = "bootstrap", bootstrap = 5000)
summary(out3)
parameterEstimates(out3) # Percentile CI
parameterEstimates(out3, boot.ci.type = "bca.simple")

### Bootstrapping Intro ###

rawData <- sample(c(0 : 7),
                  size = 52,
                  replace = TRUE,
                  prob = pchisq(c(0 : 7), 3)
                  )

obsMode <- names(which.max(table(rawData)))

nSams <- 1000
bootMode <- rep(NA, nSams)
for(b in 1 : nSams) {
    bootSam <- rawData[sample(c(1 : length(rawData)),
                              size = length(rawData),
                              replace = TRUE)]
    bootMode[b] <- names(which.max(table(bootSam)))
}

hist(as.numeric(bootMode))

mean(bootMode < 4)
calcMode <- function(x) names(which.max(table(x)))
calcMode(bootMode)
sort(bootMode)[25]
sort(bootMode)[975]

n <- 100000
nullData <- rnorm(n)
altData <- rnorm(n, 2, 1)

altDens <- density(altData)
nullDens <- density(nullData)

plot(nullDens,
     ylim = range(c(altDens$y, nullDens$y)),
     xlim = range(c(altDens$x, nullDens$x))
     )
lines(x = rep(mean(nullData), 2),
      y = c(0, max(nullDens$y)),
      lty = 2)

lines(altDens, col = "red")
lines(x = rep(mean(altData), 2),
      y = c(0, max(altDens$y)),
      lty = 2,
      col = "red")

legend(x = "topleft",
       legend = c("Null", "Alternative"),
       col = c("black", "red"),
       lty = 1,
       inset = 0.02)

## Check pre-conditions:
mod1.2 <- lm(policy ~ polAffil, data = dat1)
mod2.2 <- lm(policy ~ sysRac, data = dat1)
mod3.2 <- lm(sysRac ~ polAffil, data = dat1)

## Partial out the mediator's effect:
mod4.2 <- lm(policy ~ sysRac + polAffil, data = dat1)

summary(mod1.2)
summary(mod2.2)
summary(mod3.2)
summary(mod4.2)

## Extract important parameter estimates:
a <- coef(mod3)["polAffil"]
b <- coef(mod4)["sysRac"]
c <- coef(mod1)["polAffil"]
cPrime <- coef(mod4)["polAffil"]

## Compute indirect effects:
ieDiff <- c - cPrime
ieProd <- a * b

## Calculate Sobel's Z:
seA <- sqrt(diag(vcov(mod3)))["polAffil"]
seB <- sqrt(diag(vcov(mod4)))["sysRac"]

sobelZ <- ieProd / sqrt(b^2 * seA^2 + a^2 * seB^2)
sobelZ

sobelP <- 2 * pnorm(sobelZ, lower = FALSE)
sobelP

summary(lm(policy ~ revDisc, data = dat1))


mod1 <- lm(policy ~ revDisc, data = dat1)
mod2 <- lm(sysRac ~ revDisc, data = dat1)
mod3 <- lm(policy ~ sysRac, data = dat1)

mod4 <- lm(policy ~ revDisc + sysRac, data = dat1)

a <- coef(mod2)["revDisc"]
b <- coef(mod4)["sysRac"]
seA <- sqrt(diag(vcov(mod2)))["revDisc"]
seB <- sqrt(diag(vcov(mod4)))["sysRac"]

sobelSE <- sqrt(a^2 * seB^2 + b^2 * seA^2)

sobelZ <- (a * b) / sobelSE
sobelZ

sobelP <- 2 * pnorm(sobelZ, lower = TRUE)
sobelP


sigma <- matrix(0.5, 3, 3)
diag(sigma) <- 1.0

dat1 <- data.frame(rmvnorm(500, c(0, 0, 0), sigma))
colnames(dat1) <- c("x", "y", "m")

mod1 <- lm(y ~ x, data = dat1)
mod2 <- lm(y ~ m, data = dat1)
mod3 <- lm(m ~ x, data = dat1)

mod4 <- lm(y ~ m + x, data = dat1)

round(summary(mod1)$coef, 3)
round(summary(mod3)$coef, 3)
round(summary(mod4)$coef, 3)

a <- round(coef(mod3)["x"], 3)
b <- round(coef(mod4)["m"], 3)
seA <- round(sqrt(diag(vcov(mod3)))["x"], 3)
seB <- round(sqrt(diag(vcov(mod4)))["m"], 3)

sobelSE <- round(sqrt(a^2 * seB^2 + b^2 * seA^2), 3)

sobelZ <- round((a * b) / sobelSE, 3)
sobelZ

sobelP <- 2 * pnorm(sobelZ, lower = FALSE)
sobelP


