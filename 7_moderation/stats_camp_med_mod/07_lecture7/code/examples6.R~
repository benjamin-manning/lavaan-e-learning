### Title:    Mediation & Moderation: Lecture 4 Examples
### Author:   Kyle M. Lang
### Created:  2016-FEB-06
### Modified: 2016-FEB-21

install.packages("plm", repos = "http://rweb.quant.ku.edu/cran")

library(plm)
library(lavaan)
library(foreign)

dataDir <- "../data/"

dat2 <- read.spss(paste0(dataDir, "three_wave_longitudinal_mediation.sav"),
                  to.data.frame = TRUE)

colnames(dat2) <- c("att1", "conf1", "horn1",
                    "att2", "conf2", "horn2",
                    "att3", "conf3", "horn3")

mod2.1 <- "
happy3 ~ happy2 + happy1 + grat2 + grat1 + savor2 + savor1
happy2 ~ happy1 + grat1 + savor1

grat3 ~ grat2 + grat1 + savor2 + savor1 + happy2 + happy1
grat2 ~ grat1 + savor1 + happy1

savor3 ~ savor2 + savor1 + grat2 + grat1 + happy2 + happy1
savor2 ~ savor1 + grat1 + happy1

happy3 ~~ grat3 + savor3
grat3 ~~ savor3

happy2 ~~ grat2 + savor2
grat2 ~~ savor2
"

out2.1 <- sem(mod2.1, data = dat2)
summary(out2.1)


mod2.2 <- "
happy3 ~ happy2 + b2*grat2 + cp2*savor2
happy2 ~ happy1 + b1*grat1 + cp1*savor1

grat3 ~ grat2 + a2*savor2
grat2 ~ grat1 + a1*savor1

savor3 ~ savor2
savor2 ~ savor1

happy3 ~~ grat3 + savor3
grat3 ~~ savor3

happy2 ~~ grat2 + savor2
grat2 ~~ savor2

ab1 := a1*b1
ab2 := a2*b2
"

out2.2 <- sem(mod2.2, data = dat2, se = "boot")
summary(out2.2)
parameterEstimates(out2.2, boot.ci.type = "bca.simple")



mod2.1 <- "
att3 ~ att2 + b2*conf2 + cp2*horn2
att2 ~ att1 + b1*conf1 + cp1*horn1

conf3 ~ conf2 + a2*horn2
conf2 ~ conf1 + a1*horn1

horn3 ~ horn2
horn2 ~ horn1

horn3 ~~ conf3 + att3
conf3 ~~ att3

horn2 ~~ conf2 + att2
conf2 ~~ att2

ab1 := a1*b1
ab2 := a2*b2
"

out2.1 <- sem(mod2.1, data = dat2, se = "boot")
summary(out2.1)
parameterEstimates(out2.1, boot.ci.type = "bca.simple")


mod2.3 <- "
happy3 ~ happy2 + happy1 + grat2 + savor2
happy2 ~ happy1 + grat1 + savor1

grat3 ~ grat2 + grat1 + savor2
grat2 ~ grat1 + savor1

savor3 ~ savor2 + savor1
savor2 ~ savor1

happy3 ~~ grat3 + savor3
grat3 ~~ savor3

happy2 ~~ grat2 + savor2
grat2 ~~ savor2
"

out2.3 <- sem(mod2.3, data = dat2)
summary(out2.3)

chiDiff2.3 <- fitMeasures(out2.3)["chisq"] - fitMeasures(out2.2)["chisq"]
dfDiff2.3 <- fitMeasures(out2.3)["df"] - fitMeasures(out2.2)["df"]
pchisq(chiDiff2.3, dfDiff2.3, lower = FALSE)


mod2.4 <- "
happy3 ~ happy2 + happy1
happy2 ~ happy1

grat3 ~ grat2 + grat1 + happy2
grat2 ~ grat1 + happy1

savor3 ~ savor2 + savor1 + grat2 + happy2
savor2 ~ savor1 + grat1 + happy1

happy3 ~~ grat3 + savor3
grat3 ~~ savor3

happy2 ~~ grat2 + savor2
grat2 ~~ savor2
"

out2.4 <- sem(mod2.4, data = dat2)
summary(out2.4)

chiDiff2.4 <- fitMeasures(out2.4)["chisq"] - fitMeasures(out2.2)["chisq"]
dfDiff2.4 <- fitMeasures(out2.4)["df"] - fitMeasures(out2.2)["df"]
pchisq(chiDiff2.4, dfDiff2.4, lower = FALSE)

dfDiff2.3
dfDiff2.4

chiDiff2.3
chiDiff2.4

fitMeasures(out2.3)["aic"] - fitMeasures(out2.4)["aic"]



mod2.2 <- "
happy3 ~ happy2 + happy1 + b1*grat2 + savor2
happy2 ~ happy1 + grat1 + savor1

grat3 ~ grat2 + grat1 + savor2 + happy2
grat2 ~ grat1 + a1*savor1 + happy1

savor3 ~ savor2 + savor1 + grat2 + happy2
savor2 ~ savor1 + grat1 + happy1

happy3 ~~ grat3 + savor3
grat3 ~~ savor3

happy2 ~~ grat2 + savor2
grat2 ~~ savor2
"

out2.2 <- sem(mod2.2, data = dat2)
summary(out2.2)




, se = "boot", boot = 2500)
summary(out1)
parameterEstimates(out1, boot.ci.type = "bca.simple")

mod2 <- "
att3 ~ att2 + horn2
att2 ~ att1 + horn1

horn3 ~ horn2 + att2
horn2 ~ horn1 + att1

att3 ~~ horn3
att2 ~~ horn2
"

out2 <- sem(mod2, data = dat1)
summary(out2)


mod2 <- "
att3 ~ att2 + b2*dom2 + c2*horn2
att2 ~ att1 + b2*dom1 + c2*horn1

dom3 ~ dom2 + a1*horn2
dom2 ~ dom1 + a1*horn1

horn3 ~ horn2
horn2 ~ horn1

att3 ~~ dom3 + horn3
dom3 ~~ horn3

att2 ~~ dom2 + horn2
dom2 ~~ horn2

ab := a1*b2
"

out2 <- sem(mod2, data = dat1)

chiDiff <- fitMeasures(out2)["chisq"] - fitMeasures(out1)["chisq"]
dfDiff <- fitMeasures(out2)["df"] - fitMeasures(out1)["df"]
pchisq(chiDiff, dfDiff, lower = FALSE)


mod3 <- "
att3 ~ att2 + b2*dom2 + c2*horn2
att2 ~ att1 + b1*dom1 + c1*horn1

dom3 ~ dom2 + a2*horn2 + a22*att2
dom2 ~ dom1 + a1*horn1 + a21*att1

horn3 ~ horn2
horn2 ~ horn1

att3 ~~ dom3 + horn3
dom3 ~~ horn3

att2 ~~ dom2 + horn2
dom2 ~~ horn2

ab := c1*a22
"

out3 <- sem(mod3, data = dat1, se = "boot", boot = 2500)
summary(out3)
parameterEstimates(out3, boot.ci.type = "bca.simple")

dat2 <- apply(dat1, 2, scale)

mod4 <- "
att3 ~ att2 + b1*dom2 + horn2
att2 ~ att1 + dom1 + horn1

dom3 ~ dom2 + horn2 + att2
dom2 ~ dom1 + a1*horn1 + a2*att1

horn3 ~ horn2 + b2*dom2 + att2
horn2 ~ horn1 + dom1 + att1

att3 ~~ dom3 + horn3
dom3 ~~ horn3

att2 ~~ dom2 + horn2
dom2 ~~ horn2

ab1 := a1*b1
ab2 := a2*b2

ab2 == ab1
"

out4 <- sem(mod4, data = dat2)

out4 <- sem(mod4, data = dat2, se = "boot", boot = 2500)
summary(out4)
parameterEstimates(out4, boot.ci.type = "bca.simple")


chiDiff <- fitMeasures(out4)["chisq"] - fitMeasures(out3)["chisq"]
dfDiff <- fitMeasures(out4)["df"] - fitMeasures(out3)["df"]
pchisq(chiDiff, dfDiff, lower = FALSE)


mod5 <- "
att3 ~ att2
att2 ~ att1

dom3 ~ dom2 + att2
dom2 ~ dom1 + a1*horn1

horn3 ~ horn2 + b2*dom2 + att2
horn2 ~ horn1 + dom1 + att1

att3 ~~ dom3 + horn3
dom3 ~~ horn3

att2 ~~ dom2 + horn2
dom2 ~~ horn2

ab := a1*b2
"

out5 <- sem(mod5, data = dat1, se = "boot", boot = 2500)
summary(out5)
parameterEstimates(out5, boot.ci.type = "bca.simple")



parameterEstimates(out1, boot.ci.type = "bca.simple")

nBoot <- 1000
bootType <- "bca.simple"

dataDir <- "../data/"
fileName <- "adamsKlpsScaleScores.rds"
dat1 <- readRDS(paste0(dataDir, fileName))

## Parallel Multiple Mediator Model:
mod1.1 <- "
policy ~ polAffil + b1*merit + b2*sysRac + b3*indRac
merit ~ a1*polAffil
sysRac ~ a2*polAffil
indRac ~ a3*polAffil

merit ~~ sysRac + indRac
sysRac ~~ indRac

ab1 := a1*b1
ab2 := a2*b2
ab3 := a3*b3
totalIE := ab1 + ab2 + ab3
"

out1.1 <-
    sem(mod1.1, data = dat1, se = "boot", boot = nBoot)

summary(out1.1)
parameterEstimates(out1.1, boot.ci.type = bootType)[ , -c(1 : 3)]


## Test differences in specific indirect effects (Method 1):
mod1.2 <- "
policy ~ polAffil + b1*merit + b2*sysRac + b3*indRac
merit ~ a1*polAffil
sysRac ~ a2*polAffil
indRac ~ a3*polAffil

merit ~~ sysRac + indRac
sysRac ~~ indRac

ab1 := a1*b1
ab2 := a2*b2
ab3 := a3*b3
totalIE := ab1 + ab2 + ab3

ab2 == ab3
"

out1.2 <- sem(mod1.2, data = dat1, se = "bootstrap", bootstrap = 1000)
summary(out1.2)

## Conduct a chi-squared difference test:
chiDiff <- fitMeasures(out1.2)["chisq"] - fitMeasures(out1)["chisq"]
dfDiff <- fitMeasures(out1.2)["df"] - fitMeasures(out1)["df"]
pchisq(chiDiff, dfDiff, lower = FALSE)


## Test differences in specific indirect effects (Method 2):
mod1.3 <- "
policy ~ polAffil + b1*merit + b2*sysRac + b3*indRac
merit ~ a1*polAffil
sysRac ~ a2*polAffil
indRac ~ a3*polAffil

merit ~~ sysRac + indRac
sysRac ~~ indRac

ab1 := a1*b1
ab2 := a2*b2
ab3 := a3*b3
totalIE := ab1 + ab2 + ab3

test1 := ab2 - ab3
"

out1.3 <- sem(mod1.3, data = dat1, se = "bootstrap", bootstrap = 1000)

summary(out1.3)
parameterEstimates(out1.3, boot.ci.type = "bca.simple")


## Serial Multiple Mediator Model:
mod2.1 <- "
policy ~ polAffil + b1*merit + b2*sysRac
merit ~ a1*polAffil
sysRac ~ a2*polAffil + d21*merit

ab1 := a1*b1
ab2 := a2*b2
fullIE := a1*d21*b2
totalIE := ab1 + ab2 + fullIE
"

out2.1 <- sem(mod2.1, data = dat1, se = "bootstrap", bootstrap = 1000)

summary(out2.1)
parameterEstimates(out2.1, boot.ci.type = "bca.simple")
parameterEstimates(out2.1)


## Restricted Serial Multiple Mediator Model:
mod2.2 <- "
policy ~ polAffil + b2*sysRac
merit ~ a1*polAffil
sysRac ~ d21*merit

fullIE := a1*d21*b2
"

out2.2 <- sem(mod2.2, data = dat1, se = "bootstrap", bootstrap = 1000)

summary(out2.2)
parameterEstimates(out2.2, boot.ci.type = "bca.simple")
parameterEstimates(out2.2)


## Test Differences between Indirect Effects
## in Serial Multiple Mediator Model (Method 1):
mod2.3 <- "
policy ~ polAffil + b1*merit + b2*sysRac
merit ~ a1*polAffil
sysRac ~ a2*polAffil + d21*merit

ab1 := a1*b1
ab2 := a2*b2
fullIE := a1*d21*b2
totalIE := ab1 + ab2 + fullIE

fullIE == ab1
fullIE == ab2
"

out2.3 <- sem(mod2.3, data = dat1, se = "bootstrap", bootstrap = 1000)
summary(out2.3)

## Conduct a chi-squared difference test:
chiDiff <- fitMeasures(out2.3)["chisq"] - fitMeasures(out2.1)["chisq"]
dfDiff <- fitMeasures(out2.3)["df"] - fitMeasures(out2.1)["df"]
pchisq(chiDiff, dfDiff, lower = FALSE)



## Test Differences between Indirect Effects
## in Serial Multiple Mediator Model (Method 1):
mod2.4 <- "
policy ~ polAffil + b1*merit + b2*sysRac
merit ~ a1*polAffil
sysRac ~ a2*polAffil + d21*merit

ab1 := a1*b1
ab2 := a2*b2
fullIE := a1*d21*b2
totalIE := ab1 + ab2 + fullIE

fullIE == ab1
"

out2.4 <- sem(mod2.4, data = dat1, se = "bootstrap", bootstrap = 1000)
summary(out2.4)

## Conduct a chi-squared difference test:
chiDiff <- fitMeasures(out2.4)["chisq"] - fitMeasures(out2.1)["chisq"]
dfDiff <- fitMeasures(out2.4)["df"] - fitMeasures(out2.1)["df"]
pchisq(chiDiff, dfDiff, lower = FALSE)


## Test Differences between Indirect Effects
## in Serial Multiple Mediator Model (Method 1):
mod2.5 <- "
policy ~ polAffil + b1*merit + b2*sysRac
merit ~ a1*polAffil
sysRac ~ a2*polAffil + d21*merit

ab1 := a1*b1
ab2 := a2*b2
fullIE := a1*d21*b2
totalIE := ab1 + ab2 + fullIE

fullIE == ab2
"

out2.5 <- sem(mod2.5, data = dat1, se = "bootstrap", bootstrap = 1000)
summary(out2.5)

## Conduct a chi-squared difference test:
chiDiff <- fitMeasures(out2.5)["chisq"] - fitMeasures(out2.1)["chisq"]
dfDiff <- fitMeasures(out2.5)["df"] - fitMeasures(out2.1)["df"]
pchisq(chiDiff, dfDiff, lower = FALSE)


## Test Differences between Indirect Effects
## in Serial Multiple Mediator Model (Method 2):
mod2.6 <- "
policy ~ polAffil + b1*merit + b2*sysRac
merit ~ a1*polAffil
sysRac ~ a2*polAffil + d21*merit

ab1 := a1*b1
ab2 := a2*b2
fullIE := a1*d21*b2
totalIE := ab1 + ab2 + fullIE

test1 := fullIE - ab1
"

out2.6 <- sem(mod2.6, data = dat1, se = "bootstrap", bootstrap = 1000)

summary(out2.6)
parameterEstimates(out2.6, boot.ci.type = "bca.simple")


## Test Differences between Indirect Effects
## in Serial Multiple Mediator Model (Method 2):
mod2.7 <- "
policy ~ polAffil + b1*merit + b2*sysRac
merit ~ a1*polAffil
sysRac ~ a2*polAffil + d21*merit

ab1 := a1*b1
ab2 := a2*b2
fullIE := a1*d21*b2
totalIE := ab1 + ab2 + fullIE

test1 := fullIE - ab2
"

out2.7 <- sem(mod2.6, data = dat1, se = "bootstrap", bootstrap = 1000)

summary(out2.7)
parameterEstimates(out2.7, boot.ci.type = "bca.simple")


## Serial Multiple Mediator Model with 3 Mediators:
mod3.1 <- "
policy ~ polAffil + b1*merit + b2*sysRac + b3*revDisc
merit ~ a1*polAffil
sysRac ~ a2*polAffil + d21*merit
revDisc ~ a3*polAffil + d32*sysRac + d31*merit

ab1 := a1*b1
ab2 := a2*b2
ab3 := a3*b3

partIE1 := a1*d21*b2
partIE2 := a2*d32*b3
partIE3 := a1*d31*b3

fullIE := a1*d21*d32*b3

totalIE := ab1 + ab2 + ab3 + partIE1 + partIE2 + partIE3 + fullIE
"

out3.1 <- sem(mod3.1, data = dat1, se = "bootstrap", bootstrap = 5000)

summary(out3.1)
parameterEstimates(out3.1, boot.ci.type = "bca.simple")


## Hybrid Multiple Mediator Model:
mod4.1 <- "
policy ~ b1*sysRac + b3*revDisc + b2*merit + polAffil
sysRac ~ d211*merit + a1*polAffil
revDisc ~ d212*merit + a3*polAffil
merit ~ a2*polAffil

sysRac ~~ revDisc

ab1 := a1*b1
ab2 := a2*b2
ab3 := a3*b3

fullIE1 := a2*d211*b1
fullIE2 := a2*d212*b3

totalIE := ab1 + ab2 + ab3 + fullIE1 + fullIE2
"

out4.1 <- sem(mod4.1, data = dat1, se = "bootstrap", bootstrap = 1000)

summary(out4.1)
parameterEstimates(out4.1, boot.ci.type = "bca.simple")
