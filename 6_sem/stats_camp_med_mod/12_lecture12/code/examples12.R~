### Title:    Med/Mod Lecture 12: Examples
### Author:   Kyle M. Lang
### Created:  2016-MAY-01
### Modified: 2016-MAY-01

rm(list = ls(all = TRUE))

set.seed(235711)

library(lavaan)
library(mvtnorm)
library(semTools)

dataDir <- "../data/"

nObs <- 500

sigma <- matrix(0.3, 2, 2)
diag(sigma) <- 1.0

X <- rmvnorm(nObs, rep(0, 2), sigma)
y <- 0.5*X[ , 1] + 0.5*X[ , 1] + 0.25*X[ , 1]*X[ , 2] + rnorm(nObs, 0, 0.5)

eta <- cbind(X, y)

lambda <- matrix(c(rep(0.7, 3), rep(0.0, 9),
                   rep(0.7, 3), rep(0.0, 9),
                   rep(0.7, 3)),
                 ncol = 3)

theta <- diag(rep(1 - 0.7^2, 9))

dat1 <- eta %*% t(lambda) + rmvnorm(nObs, rep(0, 9), theta)

colnames(dat1) <- c(paste0("x", c(1 : 3)),
                    paste0("z", c(1 : 3)),
                    paste0("y", c(1 : 3))
                    )
dat1 <- as.data.frame(dat1)

saveRDS(dat1, file = paste0(dataDir, "lecture12Data.rds"))

mod1 <- "
fX =~ x1 + x2 + x3
fZ =~ z1 + z2 + z3
fY =~ y1 + y2 + y3
"

out1 <- cfa(mod1, data = dat1, std.lv = TRUE)
summary(out1)
fitMeasures(out1)

mod2 <- "
fX =~ x1 + x2 + x3
fZ =~ z1 + z2 + z3
fY =~ y1 + y2 + y3

fY ~ fX + fZ
"

out2 <- sem(mod2, data = dat1, std.lv = TRUE)
summary(out2)
fitMeasures(out2)

x1z1 <- with(dat1, x1*z1)
x1z2 <- with(dat1, x1*z2)
x1z3 <- with(dat1, x1*z3)

x2z1 <- with(dat1, x2*z1)
x2z2 <- with(dat1, x2*z2)
x2z3 <- with(dat1, x2*z3)

x3z1 <- with(dat1, x3*z1)
x3z2 <- with(dat1, x3*z2)
x3z3 <- with(dat1, x3*z3)

predDat <- as.matrix(dat1[ , -grep("y", colnames(dat1))])

dat2 <- dat1

dat2$x1z1R <- lm(x1z1 ~ predDat)$resid
dat2$x1z2R <- lm(x1z2 ~ predDat)$resid
dat2$x1z3R <- lm(x1z3 ~ predDat)$resid

dat2$x2z1R <- lm(x2z1 ~ predDat)$resid
dat2$x2z2R <- lm(x2z2 ~ predDat)$resid
dat2$x2z3R <- lm(x2z3 ~ predDat)$resid

dat2$x3z1R <- lm(x3z1 ~ predDat)$resid
dat2$x3z2R <- lm(x3z2 ~ predDat)$resid
dat2$x3z3R <- lm(x3z3 ~ predDat)$resid

mod3 <- "
fX =~ x1 + x2 + x3
fZ =~ z1 + z2 + z3
fY =~ y1 + y2 + y3
fXZ =~ x1z1R + x1z2R + x1z3R +
x2z1R + x2z2R + x2z3R +
x3z1R + x3z2R + x3z3R

fY ~ fX + fZ + fXZ

fX ~~ fZ
fX ~~ 0*fXZ
fZ ~~ 0*fXZ

x1z1R ~~ x1z2R + x1z3R + x2z1R + x3z1R
x1z2R ~~ x1z3R + x2z2R + x3z2R
x1z3R ~~ x2z3R + x3z3R

x2z1R ~~ x2z2R + x2z3R + x3z1R
x2z2R ~~ x2z3R + x3z2R
x2z3R ~~ x3z3R

x3z1R ~~ x3z2R + x3z3R
x3z2R ~~ x3z3R
"

out3 <- sem(mod3, data = dat2, std.lv = TRUE, meanstructure = FALSE)
summary(out3)
fitMeasures(out3)

probeOut3 <- probe2WayRC(fit = out3,
                         nameX = c("fX", "fZ", "fXZ"),
                         nameY = "fY",
                         modVar = "fZ",
                         valProbe = c(-1, 0, 1)
                         )

mod4 <- "
fX =~ x1 + x2 + x3
fZ =~ z1 + z2 + z3
fY =~ y1 + y2 + y3
fXZ =~ x1z1R + x2z2R + x3z3R

fY ~ fX + fZ + fXZ

fX ~~ fZ
fX ~~ 0*fXZ
fZ ~~ 0*fXZ
"

out4 <- sem(mod4, data = dat2, std.lv = TRUE, meanstructure = TRUE)
summary(out4)
fitMeasures(out4)

fitMeasures(out3)[c("aic", "bic")]
fitMeasures(out4)[c("aic", "bic")]

probeOut4 <- probe2WayRC(fit = out4,
                         nameX = c("fX", "fZ", "fXZ"),
                         nameY = "fY",
                         modVar = "fZ",
                         valProbe = c(-1, 0, 1)
                         )

probeOut4$SimpleSlope

dat3 <- data.frame(lapply(dat1, scale, scale = FALSE)) 

tmpDat <- data.frame(
    x1z1 = with(dat3, x1*z1),
    x1z2 = with(dat3, x1*z2),
    x1z3 = with(dat3, x1*z3),
    
    x2z1 = with(dat3, x2*z1),
    x2z2 = with(dat3, x2*z2),
    x2z3 = with(dat3, x2*z3),
    
    x3z1 = with(dat3, x3*z1),
    x3z2 = with(dat3, x3*z2),
    x3z3 = with(dat3, x3*z3)
)

dat3 <- data.frame(dat3,
                   lapply(tmpDat, scale, scale = FALSE)
                   )


mod5 <- "
fX =~ x1 + x2 + x3
fZ =~ z1 + z2 + z3
fY =~ y1 + y2 + y3
fXZ =~ x1z1 + x1z2 + x1z3 +
x2z1 + x2z2 + x2z3 +
x3z1 + x3z2 + x3z3

fY ~ fX + fZ + fXZ

fX ~~ fZ

x1z1 ~~ x1z2 + x1z3 + x2z1 + x3z1
x1z2 ~~ x1z3 + x2z2 + x3z2
x1z3 ~~ x2z3 + x3z3

x2z1 ~~ x2z2 + x2z3 + x3z1
x2z2 ~~ x2z3 + x3z2
x2z3 ~~ x3z3

x3z1 ~~ x3z2 + x3z3
x3z2 ~~ x3z3
"

out5 <- sem(mod5, data = dat3, std.lv = TRUE)
summary(out5)
fitMeasures(out5)

out5.2 <- sem(mod5, data = dat3, std.lv = TRUE, meanstructure = TRUE)

probeOut5 <- probe2WayMC(fit = out5.2,
                         nameX = c("fX", "fZ", "fXZ"),
                         nameY = "fY",
                         modVar = "fZ",
                         valProbe = c(-1, 0, 1)
                         )
probeOut5$SimpleSlope

mod6 <- "
fX =~ x1 + x2 + x3
fZ =~ z1 + z2 + z3
fY =~ y1 + y2 + y3
fXZ =~ x1z1 + x2z2 + x3z3

fY ~ fX + fZ + fXZ

fX ~~ fZ
"

out6 <- sem(mod6, data = dat3, std.lv = TRUE)
summary(out6)
fitMeasures(out6)

fitMeasures(out5)[c("aic", "bic")]
fitMeasures(out6)[c("aic", "bic")]

out6.2 <- sem(mod6, data = dat3, std.lv = TRUE, meanstructure = TRUE)

probeOut6 <- probe2WayRC(fit = out6,
                         nameX = c("fX", "fZ", "fXZ"),
                         nameY = "fY",
                         modVar = "fZ",
                         valProbe = c(-1, 0, 1)
                         )

probeOut6$SimpleSlope

dat2.2 <- indProd(data = dat1,
                  var1 = c("x1", "x2", "x3"),
                  var2 = c("z1", "z2", "z3"),
                  match = FALSE,
                  residualC = TRUE)

sum(dat2 - dat2.2)

dat3 <- data.frame(lapply(dat1, scale, scale = FALSE)) 


tmpDat2 <- data.frame(
    x1z1 = with(dat1, x1*z1),
    x1z2 = with(dat1, x1*z2),
    x1z3 = with(dat1, x1*z3),
    
    x2z1 = with(dat1, x2*z1),
    x2z2 = with(dat1, x2*z2),
    x2z3 = with(dat1, x2*z3),
    
    x3z1 = with(dat1, x3*z1),
    x3z2 = with(dat1, x3*z2),
    x3z3 = with(dat1, x3*z3)
)

dat3.2 <- indProd(data = dat1,
                  var1 = c("x1", "x2", "x3"),
                  var2 = c("z1", "z2", "z3"),
                  match = FALSE,
                  doubleMC = TRUE)

sum(dat3[ , -c(1 : 9)] - dat3.2[ , -c(1 : 9)])


## Simulate some data:
sigma <- function(eta, r2) (var(eta) / r2) - var(eta)

n <- 100
b1 <- 0.8
b2 <- 0.2
b3 <- 0.5
r2 <- 0.7

x <- rnorm(n)
z <- rnorm(n)
w <- rnorm(n)

etaM1 <- cbind(x, z, x*z) %*% matrix(c(b1, b1, b3))
m1 <- etaM1 + rnorm(n, 0, sqrt(sigma(etaM1, r2)))

etaM2 <- cbind(m1, x, z, m1*z) %*% matrix(c(b1, b2, b1, b3))
m2 <- etaM2 + rnorm(n, 0, sqrt(sigma(etaM1, r2)))

etaY <- cbind(x, w, m1, m2, m2*w, x*w) %*% matrix(c(b2, b1, b2, b1, b3, b3))
y <- etaY + rnorm(n, 0, sqrt(sigma(etaY, r2)))

dat1 <- data.frame(y, x, z, w, m1, m2)

saveRDS(dat1, file = paste0(dataDir, "lecture11Data.rds"))

## Simple mediation model:
mod1 <- "
y ~ cp*x + b*m1
m1 ~ a*x

ab := a*b
"

out1 <- sem(mod1, data = dat1, se = "boot")
summary(out1)
parameterEstimates(out1, boot.ci.type = "bca.simple")


## Moderate the a path:
dat1$xz <- dat1$x * dat1$z

mod2 <- "
y ~ cp*x + b*m1
m1 ~ a1*x + a2*z + a3*xz

imm := a3*b
"

out2 <- sem(mod2, data = dat1, se = "boot")
summary(out2)
parameterEstimates(out2, boot.ci.type = "bca.simple")


## Moderate the b and c' path:
dat1$m2w <- dat1$m2 * dat1$w
dat1$xw <- dat1$w * dat1$w

mod3 <- "
y ~ cp*x + b1*m2 + b2*w + b3*m2w + xw
m2 ~ a*x 

imm := a*b3
"

out3 <- sem(mod3, data = dat1, se = "boot")
summary(out3)
parameterEstimates(out3, boot.ci.type = "bca.simple")


## Serial multiple mediator model with b2 moderated:
mod4 <- "
y ~ cp*x + b1*m1 + b2*m2 + b3*w + b4*m2w
m2 ~ a2*x + d*m1
m1 ~ a1*x

ab1 := a1*b1
imm2 := a2*b4
fullImm := a1*d*b4
"

out4 <- sem(mod4, data = dat1, se = "boot")
summary(out4)
parameterEstimates(out4, boot.ci.type = "bca.simple")

## Serial multiple mediator model with a1 and d moderated:
dat1$m1z <- dat1$m1 * dat1$z
quantile(dat1$z, c(0.05, 0.95))

mod5 <- "
y ~ cp*x + b1*m1 + b2*m2
m2 ~ a2*x + d1*m1 + d2*z + d3*m1z
m1 ~ a1*x + a2*z + a3*xz

mmIndex1 := a3*b1
ab2 := a2*b2
fullIE1 := (a1 + a3 * (-1.244962)) * (d1 + d3 * (-1.244962)) * b2
fullIE2 := (a1 + a3 * 1.369550) * (d1 + d3 * 1.369550) * b2
mmTest2 := fullIE1 - fullIE2
"

out5 <- sem(mod5, data = dat1, se = "boot")
summary(out5)
parameterEstimates(out5, boot.ci.type = "bca.simple")


mod6.1 <- "
m2 ~ cp*x + b1*m1 + b2*z + b3*m1z
m1 ~ a1*x + a2*z + a3*xz

fullIE1 := (a1 + a3 * (-1.244962)) * (b1 + b3 * (-1.244962)) * b2
fullIE2 := (a1 + a3 * 1.369550) * (b1 + b3 * 1.369550) * b2
mmTest := fullIE1 - fullIE2
"

out6.1 <- sem(mod6.1, data = dat1, se = "boot")
summary(out6.1)
parameterEstimates(out6.1, boot.ci.type = "bca.simple")


mod6.2 <- "
m2 ~ cp*x + b1*m1 + b2*z + b3*m1z
m1 ~ a1*x + a2*z + a3*xz

fullIE1 := (a1 + a3 * (-1.0)) * (b1 + b3 * (-1.0))
fullIE2 := (a1 + a3 * (-1.05)) * (b1 + b3 * (-1.05))
mmTest := fullIE1 - fullIE2
"

out6.2 <- sem(mod6.2, data = dat1, se = "boot")
summary(out6.2)
parameterEstimates(out6.2, boot.ci.type = "bca.simple")


mod7.1 <- "
m2 ~ cp*x + b*m1
m1 ~ a1*x + a2*z + a3*xz

mmIndex := a3*b
fullIE1 := (a1 + a3 * (-1.244962)) * b
fullIE2 := (a1 + a3 * 1.369550) * b
mmTest2 := fullIE1 - fullIE2
"

out7.1 <- sem(mod7.1, data = dat1, se = "boot")
summary(out7.1)
parameterEstimates(out7.1, boot.ci.type = "bca.simple")


mod7.2 <- "
m2 ~ cp*x + b*m1
m1 ~ a1*x + a2*z + a3*xz

fullIE1 := (a1 + a3 * (-1.51)) * b
fullIE2 := (a1 + a3 * (-1.5)) * b
mmTest2 := fullIE1 - fullIE2
"

out7.2 <- sem(mod7.2, data = dat1, se = "boot")
summary(out7.2)
parameterEstimates(out7.2, boot.ci.type = "bca.simple")
